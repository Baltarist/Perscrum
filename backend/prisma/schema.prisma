// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum SubscriptionTier {
  free
  pro
  enterprise
}

enum ProjectStatus {
  active
  paused
  completed
}

enum SprintStatus {
  planning
  active
  completed
}

enum TaskStatus {
  backlog
  todo
  in_progress
  review
  done
}

enum TeamRole {
  member
  admin
}

enum NotificationType {
  project_updated
  sprint_completed
  task_assigned
  daily_reminder
  badge_earned
  system_update
}

// Models
model User {
  id                   String          @id @default(uuid())
  email                String          @unique
  passwordHash         String
  displayName          String
  subscriptionTier     SubscriptionTier @default(free)
  aiUsageCount         Int             @default(0)
  subscriptionEndDate  DateTime?
  dailyFocusTaskId     String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  // Relations
  settings             UserSettings?
  ownedProjects        Project[]       @relation("ProjectOwner")
  teamMemberships      TeamMember[]
  createdTasks         Task[]          @relation("TaskCreator")
  assignedTasks        Task[]          @relation("TaskAssignee")
  createdSubtasks      Subtask[]       @relation("SubtaskCreator")
  assignedSubtasks     Subtask[]       @relation("SubtaskAssignee")
  taskStatusChanges    TaskStatusChange[]
  aiComments           AIComment[]
  sentChatMessages     ChatMessage[]
  badges               UserBadge[]
  dailyCheckins        DailyCheckin[]
  notifications        Notification[]

  @@map("users")
}

model UserSettings {
  userId               String   @id
  sprintDurationWeeks  Int      @default(1)
  dailyCheckinEnabled  Boolean  @default(true)
  dailyCheckinTime     String   @default("09:00")
  retrospectiveEnabled Boolean  @default(true)
  aiCoachName          String   @default("AI Coach")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Project {
  id                      String        @id @default(uuid())
  title                   String
  description             String?
  status                  ProjectStatus @default(active)
  colorTheme              String        @default("#3B82F6")
  targetCompletionDate    DateTime
  estimatedCompletionDate DateTime
  totalSprints            Int           @default(10)
  sprintDurationWeeks     Int           @default(1)
  ownerId                 String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  // Relations
  owner                   User          @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  teamMembers             TeamMember[]
  sprints                 Sprint[]
  notifications           Notification[]

  @@map("projects")
}

model TeamMember {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  role      TeamRole @default(member)
  joinedAt  DateTime @default(now())

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("team_members")
}

model Sprint {
  id                   String       @id @default(uuid())
  projectId            String
  sprintNumber         Int
  goal                 String?
  status               SprintStatus @default(planning)
  startDate            DateTime
  endDate              DateTime
  velocityPoints       Int?
  retrospectiveGood    String?
  retrospectiveImprove String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  // Relations
  project              Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks                Task[]

  @@unique([projectId, sprintNumber])
  @@map("sprints")
}

model Task {
  id           String     @id @default(uuid())
  sprintId     String
  title        String
  description  String?
  status       TaskStatus @default(todo)
  storyPoints  Int?
  plannedDate  DateTime?
  completedAt  DateTime?
  notes        String?    @default("")
  createdById  String
  assigneeId   String?
  isAiAssisted Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  sprint       Sprint     @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  createdBy    User       @relation("TaskCreator", fields: [createdById], references: [id])
  assignee     User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  subtasks     Subtask[]
  statusChanges TaskStatusChange[]
  aiComments   AIComment[]

  @@map("tasks")
}

model Subtask {
  id           String   @id @default(uuid())
  taskId       String
  title        String
  isCompleted  Boolean  @default(false)
  createdById  String
  assigneeId   String?
  isAiAssisted Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdBy    User     @relation("SubtaskCreator", fields: [createdById], references: [id])
  assignee     User?    @relation("SubtaskAssignee", fields: [assigneeId], references: [id])

  @@map("subtasks")
}

model TaskStatusChange {
  id          String     @id @default(uuid())
  taskId      String
  fromStatus  TaskStatus @default(todo)
  toStatus    TaskStatus
  changedById String
  changedAt   DateTime   @default(now())

  // Relations
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  changedBy   User       @relation(fields: [changedById], references: [id])

  @@map("task_status_changes")
}

model AIComment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("ai_comments")
}

model ChatMessage {
  id        String   @id @default(uuid())
  userId    String
  message   String
  response  String?
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@map("chat_messages")
}

model Badge {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  iconUrl     String?
  createdAt   DateTime @default(now())

  // Relations
  userBadges  UserBadge[]

  @@map("badges")
}

model UserBadge {
  id       String   @id @default(uuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge    Badge    @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
  @@map("user_badges")
}

model DailyCheckin {
  id           String   @id @default(uuid())
  userId       String
  date         DateTime
  mood         Int      // 1-5 scale
  productivity Int      // 1-5 scale
  notes        String?
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_checkins")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  projectId String?
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("notifications")
}